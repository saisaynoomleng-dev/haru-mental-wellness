/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  category?: string;
  publishedAt?: string;
  subtitle?: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  book?: Array<{
    title?: string;
    url?: string;
    mainImage?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
    };
    _key: string;
  }>;
  bio?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  links?: Array<{
    title?: string;
    url?: string;
    _key: string;
  }>;
};

export type Treatment = {
  _id: string;
  _type: 'treatment';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  desc?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type FAQ = {
  _id: string;
  _type: 'FAQ';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  faqs?: Array<{
    question?: string;
    answer?: string;
    _key: string;
  }>;
};

export type Review = {
  _id: string;
  _type: 'review';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  slug?: Slug;
  rating?: number;
  desc?: string;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type Contact = {
  _id: string;
  _type: 'contact';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  comment?: string;
};

export type Newsletter = {
  _id: string;
  _type: 'newsletter';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Blog
  | Author
  | Treatment
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | FAQ
  | Review
  | Slug
  | Contact
  | Newsletter;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: FAQS_QUERY
// Query: *[_type == 'FAQ'    && defined(slug.current)][0]{     faqs[]{       question,       answer     }    }
export type FAQS_QUERYResult = {
  faqs: Array<{
    question: string | null;
    answer: string | null;
  }> | null;
} | null;
// Variable: TREATMENTS_QUERY
// Query: *[_type == 'treatment'  && defined(slug.current)][0..4]{   title,   slug,   mainImage{     asset->{url}   }  } | order(title)
export type TREATMENTS_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: TREATMENT_QUERY
// Query: *[_type == 'treatment'  && slug.current == $slug][0]{   title,   mainImage{     asset->{url}   },   desc  }
export type TREATMENT_QUERYResult = {
  title: string | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  desc: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
} | null;
// Variable: LATEST_BLOGS_QUERY
// Query: *[_type == 'blog'  && defined(slug.current)  && (!defined($tags) || category == $tags)]{   title,   author->{     name   },   mainImage{     asset->{url},     alt   },   category,   slug,   publishedAt  } | order(publishedAt desc)
export type LATEST_BLOGS_QUERYResult = Array<{
  title: string | null;
  author: {
    name: string | null;
  } | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  category: string | null;
  slug: Slug | null;
  publishedAt: string | null;
}>;
// Variable: OLDEST_BLOGS_QUERY
// Query: *[_type == 'blog'  && defined(slug.current)  && (!defined($tags) || category == $tags)]{   title,   author->{     name   },   mainImage{     asset->{url},     alt   },   category,   slug,   publishedAt  } | order(publishedAt)
export type OLDEST_BLOGS_QUERYResult = Array<{
  title: string | null;
  author: {
    name: string | null;
  } | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  category: string | null;
  slug: Slug | null;
  publishedAt: string | null;
}>;
// Variable: BLOG_QUERY
// Query: *[_type == 'blog'  && slug.current == $slug][0]{   title,   author->{     name,     slug,     mainImage{      asset->{url},      alt     }   },   category,   slug,   publishedAt,   subtitle,   desc,  }
export type BLOG_QUERYResult = {
  title: string | null;
  author: {
    name: string | null;
    slug: Slug | null;
    mainImage: {
      asset: {
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
  category: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  subtitle: string | null;
  desc: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  > | null;
} | null;
// Variable: AUTHORS_QUERY
// Query: *[_type == 'author'  && defined(slug.current)]{   name,   slug,   mainImage{     asset->{url},     alt   }  } | order(name)
export type AUTHORS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
}>;
// Variable: AUTHOR_QUERY
// Query: *[_type == 'author'  && slug.current == $slug][0]{   name,   slug,   book[]{    title,    url,    mainImage{      asset->{url},      alt    }  },   mainImage{     asset->{url},     alt   },   links[]{    title,    url   }  } | order(name)
export type AUTHOR_QUERYResult = {
  name: string | null;
  slug: Slug | null;
  book: Array<{
    title: string | null;
    url: string | null;
    mainImage: {
      asset: {
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  }> | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  links: Array<{
    title: string | null;
    url: string | null;
  }> | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == 'FAQ'\n    && defined(slug.current)][0]{\n     faqs[]{\n       question,\n       answer\n     }\n    }": FAQS_QUERYResult;
    "*[_type == 'treatment'\n  && defined(slug.current)][0..4]{\n   title,\n   slug,\n   mainImage{\n     asset->{url}\n   }\n  } | order(title)": TREATMENTS_QUERYResult;
    "*[_type == 'treatment'\n  && slug.current == $slug][0]{\n   title,\n   mainImage{\n     asset->{url}\n   },\n   desc\n  }": TREATMENT_QUERYResult;
    "*[_type == 'blog'\n  && defined(slug.current)\n  && (!defined($tags) || category == $tags)]{\n   title,\n   author->{\n     name\n   },\n   mainImage{\n     asset->{url},\n     alt\n   },\n   category,\n   slug,\n   publishedAt\n  } | order(publishedAt desc)": LATEST_BLOGS_QUERYResult;
    "*[_type == 'blog'\n  && defined(slug.current)\n  && (!defined($tags) || category == $tags)]{\n   title,\n   author->{\n     name\n   },\n   mainImage{\n     asset->{url},\n     alt\n   },\n   category,\n   slug,\n   publishedAt\n  } | order(publishedAt)": OLDEST_BLOGS_QUERYResult;
    "*[_type == 'blog'\n  && slug.current == $slug][0]{\n   title,\n   author->{\n     name,\n     slug,\n     mainImage{\n      asset->{url},\n      alt\n     }\n   },\n   category,\n   slug,\n   publishedAt,\n   subtitle,\n   desc,\n  }": BLOG_QUERYResult;
    "*[_type == 'author'\n  && defined(slug.current)]{\n   name,\n   slug,\n   mainImage{\n     asset->{url},\n     alt\n   }\n  } | order(name)": AUTHORS_QUERYResult;
    "*[_type == 'author'\n  && slug.current == $slug][0]{\n   name,\n   slug,\n   book[]{\n    title,\n    url,\n    mainImage{\n      asset->{url},\n      alt\n    }\n  },\n   mainImage{\n     asset->{url},\n     alt\n   },\n   links[]{\n    title,\n    url\n   }\n  } | order(name)": AUTHOR_QUERYResult;
  }
}
